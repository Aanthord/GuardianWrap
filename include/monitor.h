#ifndef MONITOR_H
#define MONITOR_H

// Define alert types for different monitoring scenarios
#define CRITICAL_SECURITY_BREACH 1
#define BUFFER_OVERFLOW_DETECTED 2
#define SUSPICIOUS_ACTIVITY 3

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Initializes the stack canary monitoring system.
 * This function should set up any necessary data structures or monitoring threads.
 */
void setup_canary_monitoring();

/**
 * Handles alerts generated by the monitoring system.
 * @param alert_type The type of alert detected, based on predefined constants.
 */
void handle_monitoring_alert(int alert_type);

/**
 * Shuts down the application being monitored.
 * This function attempts to terminate the application gracefully.
 */
void shutdown_application();

/**
 * Attempts to restart the application after it has been shut down.
 * @param appName The name or path of the application executable.
 * @param argv The arguments to pass to the application on restart. Can be NULL if not needed.
 */
void restart_application(const char *appName, char *const argv[]);

/**
 * Sends a notification to the system administrator or responsible party.
 * @param message The message or information about the alert.
 */
void notify_administrator(const char *message);

/**
 * Increases the logging level of the system.
 * This function is a placeholder and should be integrated with the actual logging system.
 */
void increase_logging_level();

#ifdef __cplusplus
}
#endif

#endif // MONITOR_H

